stages:
  - lint
  - test
  - quality
  - build

workflow:
  name: "Pipeline from $CI_PIPELINE_SOURCE (branch: $CI_COMMIT_REF_NAME)"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

    - if: $CI_PIPELINE_SOURCE == 'push'

variables:
  VERSION: "1.0.$CI_PIPELINE_IID"

.kaniko-build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  before_script:
    - echo "Starting to build $CI_REGISTRY_IMAGE:$VERSION using DJANGO_ENV=$DJANGO_ENV"
    - echo "Verifying if the variables are defined"
    - if [ -z $CONTEXT ]; then echo "Empty CONTEXT. Exiting!"; exit 1; fi
    - if [ -z $DOCKERFILE_PATH ]; then echo "Empty DOCKERFILE_PATH. Exiting!"; exit 1; fi
  script:
    - >-
      /kaniko/executor
      --context $CONTEXT
      --dockerfile $DOCKERFILE_PATH
      --build-arg DJANGO_ENV=$DJANGO_ENV
      --single-snapshot
      --snapshot-mode=redo
      --cache=true
      --destination $CI_REGISTRY_IMAGE:$VERSION
      $EXTRA_ARGS
  artifacts:
    expire_in: 5 mins

.kaniko-build-no-push:
  extends: .kaniko-build
  script:
    - >-
      /kaniko/executor
      --context $CONTEXT
      --dockerfile $DOCKERFILE_PATH
      --build-arg DJANGO_ENV=$DJANGO_ENV
      --single-snapshot
      --snapshot-mode=redo
      --no-push

lint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/ruff:latest
  before_script:
    - echo "Starting linting with Ruff $(ruff --version)"
  script:
    - ruff check --output-format=gitlab > code-quality-report.json
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - code-quality-report.json
    expire_in: 1 week

test:
  stage: test
  image: docker:28.0
  services:
    - docker:28.0-dind
  variables:
    COVERAGE_THRESHOLD: "70"
  before_script:
    - echo "Starting unit tests with pytest and coverage (threshold = ${COVERAGE_THRESHOLD}%)"
  script:
    - >-
      docker compose -f compose-ci.yml run --rm mepa-api-ci python -m pytest
      --cov=. 
      --cov-report=xml:coverage.xml 
      --cov-report=term 
      --cov-report=html:coverage_html
      --junitxml=junit.xml
      # --cov-fail-under=${COVERAGE_THRESHOLD}
  artifacts:
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      browser_performance: coverage_html/index.html
    paths:
      - coverage.xml
      - junit.xml
      - coverage_html/
    expire_in: 1 week
  coverage: '/TOTAL.+\s+(\d+\%)/'

test-build:
  stage: test
  extends: .kaniko-build-no-push
  variables:
    CONTEXT: $CI_PROJECT_DIR
    DOCKERFILE_PATH: Dockerfile
    DJANGO_ENV: "production"

build:
  extends: .kaniko-build
  variables:
    CONTEXT: $CI_PROJECT_DIR
    EXTRA_ARGS: "--destination $CI_REGISTRY_IMAGE:latest"
    DOCKERFILE_PATH: Dockerfile
    DJANGO_ENV: "production"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'push'
